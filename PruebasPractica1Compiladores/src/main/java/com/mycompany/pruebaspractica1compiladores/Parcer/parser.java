
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.pruebaspractica1compiladores.Parcer;

import com.mycompany.pruebaspractica1compiladores.Lexer.sym;
import com.mycompany.pruebaspractica1compiladores.Lexer.appLexer;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\004\000\002\005" +
    "\015\000\002\005\015\000\002\005\017\000\002\005\017" +
    "\000\002\005\021\000\002\004\015\000\002\004\003\000" +
    "\002\003\003\000\002\003\002\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\003\000\002\010\003\000\002\010\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\004\004\001\002\000\014\012\007\013" +
    "\013\014\011\015\010\016\014\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\004\025\130\001" +
    "\002\000\004\025\114\001\002\000\004\025\100\001\002" +
    "\000\004\002\001\001\002\000\004\025\066\001\002\000" +
    "\004\025\015\001\002\000\006\017\021\025\016\001\002" +
    "\000\006\017\021\025\016\001\002\000\016\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\001\002\000\016" +
    "\020\ufff4\021\ufff4\022\ufff4\023\030\024\027\026\ufff4\001" +
    "\002\000\016\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\026\ufff0\001\002\000\010\020\023\021\025\022\024\001" +
    "\002\000\006\017\021\025\016\001\002\000\006\017\021" +
    "\025\016\001\002\000\006\017\021\025\016\001\002\000" +
    "\016\020\ufff6\021\ufff6\022\ufff6\023\030\024\027\026\ufff6" +
    "\001\002\000\006\017\021\025\016\001\002\000\006\017" +
    "\021\025\016\001\002\000\016\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\026\ufff3\001\002\000\016\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\001\002\000\016" +
    "\020\ufff5\021\ufff5\022\ufff5\023\030\024\027\026\ufff5\001" +
    "\002\000\010\020\035\021\025\022\024\001\002\000\006" +
    "\017\021\025\016\001\002\000\010\020\037\021\025\022" +
    "\024\001\002\000\006\017\021\025\016\001\002\000\010" +
    "\020\041\021\025\022\024\001\002\000\006\017\021\025" +
    "\016\001\002\000\010\020\043\021\025\022\024\001\002" +
    "\000\004\010\044\001\002\000\004\026\045\001\002\000" +
    "\010\002\ufff7\004\004\005\046\001\002\000\004\006\052" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufff8\001" +
    "\002\000\004\002\ufffb\001\002\000\004\007\053\001\002" +
    "\000\004\025\054\001\002\000\006\017\021\025\016\001" +
    "\002\000\010\020\056\021\025\022\024\001\002\000\006" +
    "\017\021\025\016\001\002\000\010\020\060\021\025\022" +
    "\024\001\002\000\004\011\061\001\002\000\004\026\062" +
    "\001\002\000\006\002\ufff7\004\004\001\002\000\004\002" +
    "\ufffa\001\002\000\010\021\025\022\024\026\065\001\002" +
    "\000\016\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026" +
    "\uffef\001\002\000\006\017\021\025\016\001\002\000\010" +
    "\020\070\021\025\022\024\001\002\000\006\017\021\025" +
    "\016\001\002\000\010\020\072\021\025\022\024\001\002" +
    "\000\006\017\021\025\016\001\002\000\010\020\074\021" +
    "\025\022\024\001\002\000\004\010\075\001\002\000\004" +
    "\026\076\001\002\000\010\002\ufff7\004\004\005\046\001" +
    "\002\000\004\002\ufffe\001\002\000\006\017\021\025\016" +
    "\001\002\000\010\020\102\021\025\022\024\001\002\000" +
    "\006\017\021\025\016\001\002\000\010\020\104\021\025" +
    "\022\024\001\002\000\006\017\021\025\016\001\002\000" +
    "\010\020\106\021\025\022\024\001\002\000\006\017\021" +
    "\025\016\001\002\000\010\020\110\021\025\022\024\001" +
    "\002\000\004\010\111\001\002\000\004\026\112\001\002" +
    "\000\010\002\ufff7\004\004\005\046\001\002\000\004\002" +
    "\ufffd\001\002\000\006\017\021\025\016\001\002\000\010" +
    "\020\116\021\025\022\024\001\002\000\006\017\021\025" +
    "\016\001\002\000\010\020\120\021\025\022\024\001\002" +
    "\000\006\017\021\025\016\001\002\000\010\020\122\021" +
    "\025\022\024\001\002\000\006\017\021\025\016\001\002" +
    "\000\010\020\124\021\025\022\024\001\002\000\004\010" +
    "\125\001\002\000\004\026\126\001\002\000\010\002\ufff7" +
    "\004\004\005\046\001\002\000\004\002\ufffc\001\002\000" +
    "\006\017\021\025\016\001\002\000\010\020\132\021\025" +
    "\022\024\001\002\000\006\017\021\025\016\001\002\000" +
    "\010\020\134\021\025\022\024\001\002\000\006\017\021" +
    "\025\016\001\002\000\010\020\136\021\025\022\024\001" +
    "\002\000\004\010\137\001\002\000\004\026\140\001\002" +
    "\000\010\002\ufff7\004\004\005\046\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\002\004\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\021\007\017" +
    "\010\016\001\001\000\010\006\063\007\017\010\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\033\007\017\010\016\001" +
    "\001\000\006\007\032\010\016\001\001\000\006\007\025" +
    "\010\016\001\001\000\002\001\001\000\004\010\031\001" +
    "\001\000\004\010\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\035\007\017\010\016\001\001\000\002\001\001\000\010" +
    "\006\037\007\017\010\016\001\001\000\002\001\001\000" +
    "\010\006\041\007\017\010\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\047\003" +
    "\046\004\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\054\007\017\010\016\001\001" +
    "\000\002\001\001\000\010\006\056\007\017\010\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\047\003\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\066\007\017" +
    "\010\016\001\001\000\002\001\001\000\010\006\070\007" +
    "\017\010\016\001\001\000\002\001\001\000\010\006\072" +
    "\007\017\010\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\047\003\046\004\076" +
    "\001\001\000\002\001\001\000\010\006\100\007\017\010" +
    "\016\001\001\000\002\001\001\000\010\006\102\007\017" +
    "\010\016\001\001\000\002\001\001\000\010\006\104\007" +
    "\017\010\016\001\001\000\002\001\001\000\010\006\106" +
    "\007\017\010\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\047\003\046\004\112" +
    "\001\001\000\002\001\001\000\010\006\114\007\017\010" +
    "\016\001\001\000\002\001\001\000\010\006\116\007\017" +
    "\010\016\001\001\000\002\001\001\000\010\006\120\007" +
    "\017\010\016\001\001\000\002\001\001\000\010\006\122" +
    "\007\017\010\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\047\003\046\004\126" +
    "\001\001\000\002\001\001\000\010\006\130\007\017\010" +
    "\016\001\001\000\002\001\001\000\010\006\132\007\017" +
    "\010\016\001\001\000\002\001\001\000\010\006\134\007" +
    "\017\010\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\047\003\046\004\140\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private int numero =0;
        private int termino=0;
        private int fact=0;
        private int exprecion=0;

        public parser(appLexer lex){
                super(lex);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= RESERVATE_WORD_GRAPHIC shapeParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // shapeParams ::= SHAPE_CIR PARENTECIS_APERTURA expr COMA expr COMA expr COMA COLOR PARENTECIS_CIERRE y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shapeParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // shapeParams ::= SHAPE_CUA PARENTECIS_APERTURA expr COMA expr COMA expr COMA COLOR PARENTECIS_CIERRE y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shapeParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // shapeParams ::= SHAPE_REC PARENTECIS_APERTURA expr COMA expr COMA expr COMA expr COMA COLOR PARENTECIS_CIERRE y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shapeParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // shapeParams ::= SHAPE_LIN PARENTECIS_APERTURA expr COMA expr COMA expr COMA expr COMA COLOR PARENTECIS_CIERRE y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shapeParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // shapeParams ::= SHAPE_POL PARENTECIS_APERTURA expr COMA expr COMA expr COMA expr COMA expr COMA COLOR PARENTECIS_CIERRE y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shapeParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // y ::= RESERVATE_WORD_ANIMATION RESERVATE_WORD_OBJECT RESERVATE_WORD_REFERENCE PARENTECIS_APERTURA expr COMA expr COMA ANIMATION PARENTECIS_CIERRE t 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("y",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // y ::= t 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("y",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t ::= s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr SUMA term 
            {
              Object RESULT =null;
		
                                        
                                        exprecion = exprecion + termino;
                                        System.out.println("El resultado de la suma es: "+exprecion);
                                        termino=0;
                                        if(exprecion>0){
                                                System.out.println("Final: "+exprecion);
                                        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr RESTA term 
            {
              Object RESULT =null;
		
                                        exprecion = exprecion + termino;
                                        System.out.println("El resultado de la resta es:"+exprecion);
                                        termino = 0;
                                        if(exprecion>0){
                                                System.out.println("Final: "+exprecion);
                                        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= term 
            {
              Object RESULT =null;
		
                                        exprecion = termino;
                                        System.out.println("El termino es: "+termino);
                                        termino=0;
                                        if(exprecion>0){
                                                System.out.println("Final: "+exprecion);
                                        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= term MULTI factor 
            {
              Object RESULT =null;
		
                                        termino = termino * fact;
                                        System.out.println("El resultado de la multiplicacion es: "+termino);
                                        fact = 0;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= term DIV factor 
            {
              Object RESULT =null;
		
                                        termino = termino / fact;
                                        System.out.println("El resultado de la divicion es: "+termino);
                                        fact = 0;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= factor 
            {
              Object RESULT =null;
		
                                        System.out.println("El factor es:"+fact);
                                        termino = fact;
                                        fact =0;
                                        numero =0;
                                        
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= NUMBER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                        numero = Integer.parseInt(e1.toString());
                                                                        System.out.println("El numero es: "+numero);
                                                                        fact = numero;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= PARENTECIS_APERTURA expr PARENTECIS_CIERRE 
            {
              Object RESULT =null;
		
                                                                        fact = exprecion;
                                                                        System.out.println("El resultado de (exp): "+fact);
                                                                        exprecion=0;
                                                                        
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
