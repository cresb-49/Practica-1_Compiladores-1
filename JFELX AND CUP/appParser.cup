package com.mycompany.pruebaspractica1compiladores.Parcer;
import com.mycompany.pruebaspractica1compiladores.Lexer.sym;
import com.mycompany.pruebaspractica1compiladores.Lexer.appLexer;
import com.mycompany.pruebaspractica1compiladores.Instructions.Settings;
import com.mycompany.pruebaspractica1compiladores.Instructions.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;


parser code {:
        private int numero =0;
        private int termino=0;
        private int fact=0;
        private int exprecion=0;
        private boolean bandera = true;
        private Settings parametrosSoft = new Settings();
        private reporteError espera = new reporteError();
        private List<String> errorsList = new ArrayList();
        private List<Object> sentencias = new ArrayList();

        public parser(appLexer lex){
                super(lex);
        }

        public Settings respuesta(){
                return parametrosSoft;
        }

        public void report_error(String message, Object info){
                System.out.println("reporterror");
        }
        public void report_fatal_error(String message, Object info){
                System.out.println("reportfatal");
        }
        public void syntax_error(Symbol cur_token){
                ParamsSymbol symboloError = (ParamsSymbol) cur_token.value;
                String err = String.format("Error de Sintaxis \"" + symboloError.lexema + "\" Linea: " + symboloError.line + " Columna: " + symboloError.column);
                err = err + "\n";
                err = err + "Se esperaba: ";
                for (int i = 0; i < expected_token_ids().size(); i++) {
                        if (!espera.simboloEsperado(expected_token_ids().get(i)).equals("")) {
                                err = err + espera.simboloEsperado(expected_token_ids().get(i));
                                if (i < (expected_token_ids().size() - 1)) {
                                        err = err + " รณ ";
                                }
                        }
                }
                errorsList.add(err);
                System.out.println(err);
        }
        protected int error_sync_size() {
		return 1;
	}
        public List<Object> getSentencias() {
                return sentencias;
        }
        public List<String> getErrorsList(){
	        return errorsList
	        ;
	}

:}

terminal ERROR,RESERVATE_WORD_GRAPHIC,RESERVATE_WORD_ANIMATION,RESERVATE_WORD_OBJECT,RESERVATE_WORD_REFERENCE,COLOR,ANIMATION,SHAPE_CIR,SHAPE_CUA,SHAPE_REC,SHAPE_LIN,SHAPE_POL,NUMBER,COMA,SUMA,RESTA,MULTI,DIV,PARENTECIS_APERTURA,PARENTECIS_CIERRE;
non terminal s,t,y,var,shapeParams,expr,term,factor;

s ::=   RESERVATE_WORD_GRAPHIC shapeParams {://System.out.println("Inicio de produccion");:}
    |   error
    ;
    
shapeParams ::= SHAPE_CIR:f PARENTECIS_APERTURA var COMA var COMA var COMA COLOR:e1 PARENTECIS_CIERRE y         {:
                                                                                                                        //System.out.println("Figura generada: "+((ParamsSymbol)f).lexema+" Color: "+((ParamsSymbol)e1).lexema);
                                                                                                                        sentencias.add(new Circulo(0, 0, 0,((ParamsSymbol)e1).lexema));
                                                                                                                :}
              | SHAPE_CUA:f PARENTECIS_APERTURA var COMA var COMA var COMA COLOR:e1 PARENTECIS_CIERRE y {:
                                                                                                                //System.out.println("Figura generada: "+((ParamsSymbol)f).lexema+" Color: "+((ParamsSymbol)e1).lexema);
                                                                                                                sentencias.add(new Cuadrado(0, 0, 0, ((ParamsSymbol)e1).lexema));
                                                                                                        :}
              | SHAPE_REC:f PARENTECIS_APERTURA var COMA var COMA var COMA var COMA COLOR:e1 PARENTECIS_CIERRE y        {:
                                                                                                                                //System.out.println("Figura generada: "+((ParamsSymbol)f).lexema+" Color: "+((ParamsSymbol)e1).lexema);
                                                                                                                                sentencias.add(new Rectangulo(0, 0, 0, 0, ((ParamsSymbol)e1).lexema));
                                                                                                                        :}
              | SHAPE_LIN:f PARENTECIS_APERTURA var COMA var COMA var COMA var COMA COLOR:e1 PARENTECIS_CIERRE y        {:
                                                                                                                                //System.out.println("Figura generada: "+((ParamsSymbol)f).lexema+" Color: "+((ParamsSymbol)e1).lexema);
                                                                                                                                sentencias.add(new Linea(0, 0, 0, 0, ((ParamsSymbol)e1).lexema));
                                                                                                                        :}
              | SHAPE_POL:f PARENTECIS_APERTURA var COMA var COMA var COMA var COMA var COMA COLOR:e1 PARENTECIS_CIERRE y       {:
                                                                                                                                        //System.out.println("Figura generada: "+((ParamsSymbol)f).lexema+" Color: "+((ParamsSymbol)e1).lexema);
                                                                                                                                        sentencias.add(new Poligono(0, 0, 0, 0, 0, ((ParamsSymbol)e1).lexema));
                                                                                                                                :}
              | error
              ;

y ::=   RESERVATE_WORD_ANIMATION RESERVATE_WORD_OBJECT RESERVATE_WORD_REFERENCE PARENTECIS_APERTURA var COMA var COMA ANIMATION:e1 PARENTECIS_CIERRE t        {:
                                                                                                                                                                        //System.out.println("Animacion de figura");
                                                                                                                                                                        sentencias.add(new Animar(0, 0, ((ParamsSymbol)e1).lexema));
                                                                                                                                                                :}
    |   t
    ;

t ::=  s        {://System.out.println("RE-inicio de produccion");:}
    |           {://System.out.println("Fin de analisis");:}
    ;

var ::= expr    {:      
                        //System.out.println("Final de operacion: "+exprecion);
                        parametrosSoft.agregarNumero(exprecion);
                        exprecion =0;
                        bandera =true;
                :}
      | error 
      ;

expr ::=    expr SUMA term      {:
                                        exprecion = exprecion + termino;
                                        //System.out.println("El resultado de la suma es: "+exprecion);
                                        termino=0;
                                :}
        |   expr RESTA term     {:
                                        exprecion = exprecion + termino;
                                        //System.out.println("El resultado de la resta es:"+exprecion);
                                        termino = 0;
                                :}
        |   term                {:
                                        exprecion = termino;
                                        //System.out.println("El termino es: "+termino);
                                        termino=0;
                                :}
        ;

term ::=    term MULTI factor   {:
                                        termino = termino * fact;
                                        //System.out.println("El resultado de la multiplicacion es: "+termino);
                                        fact = 0;
                                :}
        |   term DIV factor     {:
                                        termino = termino / fact;
                                        //System.out.println("El resultado de la divicion es: "+termino);
                                        fact = 0;
                                :}
        |   factor              {:
                                        //System.out.println("El factor es:"+fact);
                                        termino = fact;
                                        fact =0;
                                        numero =0;
                                        
                                :}
        ;

factor ::=  NUMBER:e1                                           {:
                                                                        if(exprecion == 0 && bandera ){
                                                                                //System.out.println("Inicio de operacion");
                                                                                bandera =false;
                                                                        }
                                                                        numero = Integer.parseInt(((ParamsSymbol)e1).lexema);
                                                                        //System.out.println("El numero es: "+numero);
                                                                        fact = numero;
                                                                        
                                                                :}
        |   PARENTECIS_APERTURA expr PARENTECIS_CIERRE          {:
                                                                        if(exprecion == 0 && bandera){
                                                                                //System.out.println("Inicio de operacion");
                                                                                bandera =false;
                                                                        }
                                                                        fact = exprecion;
                                                                        //System.out.println("El resultado de (exp): "+fact);
                                                                        exprecion=0;
                                                                        
                                                                :}
        ;
